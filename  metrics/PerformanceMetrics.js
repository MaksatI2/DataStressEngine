import { Rate } from 'k6/metrics';
import { TOKENS} from '../config/Constants.js';

export class PerformanceMetrics {
    constructor() {
        this.errorRate = new Rate('errors');
    }

    getErrorRate() {
        return this.errorRate;
    }

    static createSummary(data, startTime, totalLogs, logsPerSecond) {
        const endTime = new Date();
        const duration = (endTime - startTime) / 1000;
        
        const totalRequests = data.metrics.http_reqs?.values?.count || 0;
        const failedRequests = data.metrics.http_req_failed?.values?.passes || 0;
        const successRequests = totalRequests - failedRequests;
        const actualRate = duration > 0 ? totalRequests / duration : 0;
        const successRate = totalRequests > 0 ? (successRequests / totalRequests * 100) : 0;
        
        console.log('\n' + '='.repeat(60));
        console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
        console.log('='.repeat(60));
        console.log(`üïê –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:        ${startTime.toISOString()}`);
        console.log(`üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:     ${endTime.toISOString()}`);
        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:    ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
        console.log(`üì§ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:    ${totalRequests}`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ:             ${successRequests}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫:              ${failedRequests}`);
        console.log(`üéØ –¶–µ–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:    ${logsPerSecond} –ª–æ–≥–æ–≤/—Å–µ–∫`);
        console.log(`üìà –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${actualRate.toFixed(2)} –ª–æ–≥–æ–≤/—Å–µ–∫`);
        console.log(`üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å:          ${successRate.toFixed(1)}%`);
        console.log(`üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:          ${TOKENS.length}`);
        console.log('='.repeat(60));
        
        if (Math.abs(actualRate - logsPerSecond) / logsPerSecond < 0.1) {
            console.log('‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –±–ª–∏–∑–∫–∞ –∫ —Ü–µ–ª–µ–≤–æ–π!');
        } else {
            console.log(`‚ö†Ô∏è  –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ü–µ–ª–µ–≤–æ–π –Ω–∞ ${Math.abs(actualRate - logsPerSecond).toFixed(1)} –ª–æ–≥/—Å–µ–∫`);
        }
        
        if (failedRequests === 0) {
            console.log('üéâ –í—Å–µ –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log(`‚ö†Ô∏è  ${failedRequests} –ª–æ–≥–æ–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        }
        console.log('='.repeat(60) + '\n');
        
        return {
            'stdout': '',
            'summary.json': JSON.stringify(data, null, 2),
        };
    }
}